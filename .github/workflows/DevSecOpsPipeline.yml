name: DevSecOpsPipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  #push:
  #  branches: [ master ]
  #pull_request:
  #  branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: us-east-2                   # set this to your preferred AWS region, e.g. us-west-1
  AWS_ACL_ID: acl-00c482d30cef5efcf       # ACL object for configuring inbound connections
  STACK_NAME: DVWA
  DVWA_DOCKERHUB: 198daq237sdajndw3/dvwa

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  dev-ACR-devskim:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: DevSkim
        uses: microsoft/DevSkim-Action@v1
        with:
          # The sub directory of the repository root to scan. Repository root used by default.
          directory-to-scan: ./dvwa # optional, default is GITHUB_WORKSPACE
          # Optionally scan the contents of archives.
          should-scan-archives: false # optional
          # The filename for the output.
          output-filename: ./devskim-results.sarif # optional, default is devskim-results.sarif
          # The sub directory for the output under GITHUB_WORKSPACE.
          #output-directory: path/to/output # optional, default is GITHUB_WORKSPACE
      - uses: actions/upload-artifact@v2
        with:
          name: results-ACR-devskim
          path: ./devskim-results.sarif
          
  dev-SCA-depcheck:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
  
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'DVWA'
          path: './dvwa'
          format: 'HTML'    
          others: ''
      - name: Upload depcheck results
        uses: actions/upload-artifact@master
        with:
           name: results-SCA-depcheck
           path: ${{ github.workspace }}/reports
           
  dev-SAST-sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
  dev-SIS-tufflehog:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@master
        name: github checkout
        
      - name: trufflehog-actions-scan
        uses: edplato/trufflehog-actions-scan@master
        
      - name: trufflehog-actions-check
        if: always()
        uses: UnicornGlobal/trufflehog-actions-scan@v1.0.0

  build-dockerlint:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [dev-ACR-devskim, dev-SCA-depcheck, dev-SAST-sonarcloud, dev-SIS-tufflehog]
    if: always()
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: ghe-actions/dockerfile-validator@v1
        with:
          dockerfile: 'Dockerfile'
          #lint: 'hadolint'
          
  build:
    runs-on: ubuntu-latest
    needs: build-dockerlint
    if: always()
    steps:
      - uses: actions/checkout@v2
        name: Check out code
  
      - uses: ghe-actions/dockerfile-validator@v1
        with:
          dockerfile: 'Dockerfile'
          #lint: 'hadolint'
      - uses: mr-smithers-excellent/docker-build-push@v5
        name: Build & push Docker image
        with:
          image: ${{ env.DVWA_DOCKERHUB }} # dockerhub user
          tags: v1, latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
  build-docker-anchore:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build
    if: always()
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: build local container
        uses: docker/build-push-action@v2
        with:
          tags: ${{ env.DVWA_DOCKERHUB }}:latest
          push: false
          load: true

      - name: Scan image
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: "${{ env.DVWA_DOCKERHUB }}:latest"
          
          
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: results-Docker-anchore
          path: ./results.sarif
          
  build-CaC-cfripper:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build
    if: always()
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          pip install cfripper
          cfripper .aws/cloudformation.json --format txt > cfripper-results.txt
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: results-CaC-cfripper
          path: ./cfripper-results.txt
          
  build-CaC-checkov:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .aws/cloudformation.json
          #check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
          #skip_check: CKV_AWS_1 # optional: skip a specific check_id. can be comma separated list
          #quiet: true # optional: display only failed checks
          #soft_fail: true # optional: do not return an error code if there are failed checks
          framework: cloudformation # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          #output_format: json # optional: the output format, one of: cli, json, junitxml, github_failed_only
          #download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          #log_level: DEBUG # optional: set log level. Default WARNING
          #config_file: 
          #baseline: cloudformation/.checkov.baseline
          
  deploy-check-aws-stack:
     needs: [build-docker-anchore,build-CaC-cfripper,build-CaC-checkov]
     if: always()
     runs-on: ubuntu-latest
     outputs:
       DVWA_URL: ${{ steps.EB_command.outputs.url }}
       DVWA_environment: ${{ steps.EB_command.outputs.sampleenvironment }}
     steps:
       - uses: actions/checkout@v2
         name: Check out code
         
       - name: Check if DVWA Stack is already defined
         id: EB_command
         run: |
           echo "::set-output name=url::$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='URL'].OutputValue" --output text)"
           echo "::set-output name=sampleenvironment::$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='SampleEnvironment'].OutputValue" --output text)"
         env:
           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
           
       - name: Print results from EB check
         if: ${{ steps.EB_command.outputs.url != '' }} #failure
         run: |
           echo DVWA URL: ${{ steps.EB_command.outputs.url }}
           echo DVWA environment: ${{ steps.EB_command.outputs.sampleenvironment }}
   
  deploy:
     needs: deploy-check-aws-stack
     if: needs.deploy-check-aws-stack.outputs.DVWA_URL == ''
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
         name: Check out code
         
       - name: Configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

       - name: AWS CloudFormation "Deploy EB CloudFormation Stack" IaC Deploy
          # You may pin to the exact commit or the version.
          # uses: aws-actions/aws-cloudformation-github-deploy@dfbee8a4fec90af61b71bafda3890f8c4a2075ef
         uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
         with:
            # The name of the CloudFormation stack
            name: DVWA 
            # The path or URL to the CloudFormation template
            template: .aws/cloudformation.json
            # The comma-delimited list of stack template capabilities to acknowledge. Defaults to 'CAPABILITY_IAM'
            #capabilities: # optional, default is CAPABILITY_IAM
            # The parameters to override in the stack inputs. The list is comma-delimited, with each entry formatted as <ParameterName>=<ParameterValue>.
            parameter-overrides: S3Bucket=${{ secrets.S3BUCKET }}, S3Key=${{ secrets.S3KEY }}, Subnets=${{ secrets.SUBNETS }}, VpcId=${{ secrets.VPCID }}
            # If the CloudFormation change set is empty, do not fail. Defaults to '0' (will fail on empty change set)
            #no-fail-on-empty-changeset: # optional, default is 0
            # Disable rollback of the stack if stack creation fails. Defaults to '0' (will rollback if stack creation fails). This input is only used for stack creation, not for stack update
            #disable-rollback: # optional, default is 0
            # The amount of time that can pass before the stack status becomes CREATE_FAILED. This input is only used for stack creation, not for stack update
            timeout-in-minutes: 15
            # The comma-delimited list of Amazon SNS topic ARNs to publish stack related events
            #notification-arns: # optional
            # The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes to create the stack. AWS CloudFormation uses the role's credentials to make calls on your behalf. AWS CloudFormation always uses this role for all future operations on the stack. As long as users have permission to operate on the stack, AWS CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack
            #role-arn: # optional
            # Key-value pairs to associate with this stack. This input should be JSON-formatted, for example [ { "Key": "string", "Value": "string" } ]
            #tags: # optional
            # Whether to enable termination protection on the specified stack. Defaults to '0' (terminated protection will be disabled) This input is only used for stack creation, not for stack update
            #termination-protection: # optional, default is 0

       # MY_PUBLIC_IPV4
       - name: whitelist my IP Address
         #aws s3 sync ./build s3://test-bucket
         run: |
            aws ec2 create-network-acl-entry --network-acl-id ${{ env.AWS_ACL_ID }} --ingress --rule-number 98 --cidr-block ${{ secrets.MY_PUBLIC_IPV4 }}/32 --rule-action allow --protocol -1
         env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

       - name: whitelist VPC Subnet Address
         run: |
            aws ec2 create-network-acl-entry --network-acl-id ${{ env.AWS_ACL_ID }} --ingress --rule-number 99 --cidr-block 172.31.0.0/16 --rule-action allow --protocol -1
         env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

       - name: remove IP internet ingress rule
         #aws s3 sync ./build s3://test-bucket
         run: |
            aws ec2 delete-network-acl-entry --network-acl-id ${{ env.AWS_ACL_ID }} --ingress --rule-number 100
         env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
            
  deploy-update:
     needs: deploy-check-aws-stack
     if: needs.deploy-check-aws-stack.outputs.DVWA_URL != ''
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
         name: Check out code
         
       - name: Update DVWA AWS environment
         #aws eb deploy ${{ needs.check_aws_stack.outputs.DVWA_environment }}
         run: |
           aws elasticbeanstalk update-environment --environment-name ${{ needs.check_aws_stack.outputs.DVWA_environment }}
         env:
           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
  test:
     needs: [deploy, deploy-update]
     runs-on: ubuntu-latest
     if: always()
     steps:
       - uses: actions/checkout@v2
         name: Check out code
         
       - name: Github Runner Public IP
         id: ip
         uses: haythem/public-ip@v1.2

       - name: Print Github Runner Public IP
         run: |
           echo ${{ steps.ip.outputs.ipv4 }}
           echo ${{ steps.ip.outputs.ipv6 }}
           
       - name: whitelist runner IP Address
         #aws s3 sync ./build s3://test-bucket
         run: |
           aws ec2 create-network-acl-entry --network-acl-id ${{ env.AWS_ACL_ID }} --ingress --rule-number 90 --cidr-block ${{ steps.ip.outputs.ipv4 }}/32 --rule-action allow --protocol -1
         env:
           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

       - name: Set up Python ${{ matrix.python-version }}
         uses: actions/setup-python@v1
         with:
           python-version: 3.9

       - name: Install Selenium
         run: |
           pip install requests
           pip install selenium
           pip install pytest
       - name: Run pytest test_selenium.py --browser=chrome --headless
         run: |
           pytest test_selenium.py "${{ needs.deploy-check-aws-stack.outputs.DVWA_URL }}"
           
       - name: cleanup whitelist runner IP Address
         #aws s3 sync ./build s3://test-bucket
         if: always()
         run: |
           aws ec2 delete-network-acl-entry --network-acl-id ${{ env.AWS_ACL_ID }} --ingress --rule-number 90
         env:
           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
           
  test-DAST-zap:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Github Runner Public IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Print Github Runner Public IP
        run: |
          echo ${{ steps.ip.outputs.ipv4 }}
          echo ${{ steps.ip.outputs.ipv6 }}
      
      - name: whitelist runner IP Address
        #aws s3 sync ./build s3://test-bucket
        run: |
          aws ec2 create-network-acl-entry --network-acl-id ${{ env.AWS_ACL_ID }} --ingress --rule-number 90 --cidr-block ${{ steps.ip.outputs.ipv4 }}/32 --rule-action allow --protocol -1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        
      #- name: Whitelist Runner IP on AWS
      #  uses: dunno
        
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: '${{ needs.deploy-check-aws-stack.outputs.DVWA_URL }}'
          #rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: true
          issue_title: "ZAP_report"
          
      - name: cleanup whitelist runner IP Address
        #aws s3 sync ./build s3://test-bucket
        run: |
          aws ec2 delete-network-acl-entry --network-acl-id ${{ env.AWS_ACL_ID }} --ingress --rule-number 90
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
