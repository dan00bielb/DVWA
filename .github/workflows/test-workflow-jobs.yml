
name: test-workflow-jobs

on:  
  workflow_dispatch:

jobs:

  Ajob1:
    runs-on: ubuntu-latest
    steps:
      - name: Failed
        run: |
          exit 1
      - name: Needs context
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
  Ajob2:
    runs-on: ubuntu-latest
    steps:
      - name: Succeed
        run: |
          echo "ok"
      - name: Needs context
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
          
  Bjob:
    runs-on: ubuntu-latest
    needs: [Ajob1, Ajob2]
    #if: always() && (needs.job1.result == 'failure' || needs.job2.result == 'failure')
    if: always() && (needs.Ajob1.result == 'success' || needs.Ajob2.result == 'success')
    outputs:
       VAR: ${{ steps.finish.outputs.status }}
    steps:
      - name: Needs context
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - name: Succeed
        id: finish
        run: |
          echo "::set-output name=status::$(echo ok)"
          
  Cjob1:
    runs-on: ubuntu-latest
    if: always() && (needs.Bjob.outputs.status == 'ok')
    needs: Bjob
    steps:
      - name: Needs context
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - name: Succeed
        run: |
          echo "ok"
          
  Cjob2:
    runs-on: ubuntu-latest
    if: always() && (needs.Bjob.outputs.status != 'ok')
    needs: Bjob
    steps:
      - name: Needs context
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - name: Succeed
        run: |
          echo "ok"
          
  Djob:
    runs-on: ubuntu-latest
    if: always() && (needs.Cjob1.result == 'success' || needs.Cjob2.result == 'success')
    needs: [Cjob1, Cjob2]
    steps:
      - name: Needs context
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - name: Succeed
        run: |
          echo "ok"
          
  Ejob:
    runs-on: ubuntu-latest
    needs: Djob
    if: always() && (needs.Djob.result == 'success')
    steps:
      - name: Needs context
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - name: Succeed
        run: |
          echo "ok"
