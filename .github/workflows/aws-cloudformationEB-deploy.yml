# This is a basic workflow to help you get started with Actions

name: aws-cloudformationEB-deploy

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: us-east-2                   # set this to your preferred AWS region, e.g. us-west-1
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: AWS CloudFormation "Deploy CloudFormation Stack" Action for GitHub Actions
        # You may pin to the exact commit or the version.
        # uses: aws-actions/aws-cloudformation-github-deploy@dfbee8a4fec90af61b71bafda3890f8c4a2075ef
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          # The name of the CloudFormation stack
          name: DVWA 
          # The path or URL to the CloudFormation template
          template: .aws/cloudformation.json
          # The comma-delimited list of stack template capabilities to acknowledge. Defaults to 'CAPABILITY_IAM'
          #capabilities: # optional, default is CAPABILITY_IAM
          # The parameters to override in the stack inputs. The list is comma-delimited, with each entry formatted as <ParameterName>=<ParameterValue>.
          parameter-overrides: S3Bucket=${{ secrets.S3BUCKET }}, S3Key=${{ secrets.S3KEY }}, Subnets=${{ secrets.SUBNETS }}, VpcId=${{ secrets.VPCID }}
          # If the CloudFormation change set is empty, do not fail. Defaults to '0' (will fail on empty change set)
          #no-fail-on-empty-changeset: # optional, default is 0
          # Disable rollback of the stack if stack creation fails. Defaults to '0' (will rollback if stack creation fails). This input is only used for stack creation, not for stack update
          #disable-rollback: # optional, default is 0
          # The amount of time that can pass before the stack status becomes CREATE_FAILED. This input is only used for stack creation, not for stack update
          timeout-in-minutes: 15
          # The comma-delimited list of Amazon SNS topic ARNs to publish stack related events
          #notification-arns: # optional
          # The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS CloudFormation assumes to create the stack. AWS CloudFormation uses the role's credentials to make calls on your behalf. AWS CloudFormation always uses this role for all future operations on the stack. As long as users have permission to operate on the stack, AWS CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, AWS CloudFormation uses the role that was previously associated with the stack
          #role-arn: # optional
          # Key-value pairs to associate with this stack. This input should be JSON-formatted, for example [ { "Key": "string", "Value": "string" } ]
          #tags: # optional
          # Whether to enable termination protection on the specified stack. Defaults to '0' (terminated protection will be disabled) This input is only used for stack creation, not for stack update
          #termination-protection: # optional, default is 0
      # MY_PUBLIC_IPV4
      - name: whitelist my IP Address
        #aws s3 sync ./build s3://test-bucket
        run: |
          aws ec2 create-network-acl-entry --network-acl-id acl-00c482d30cef5efcf --ingress --rule-number 90 --cidr-block ${{ secrets.MY_PUBLIC_IPV4 }}/32 --rule-action allow --protocol -1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      
      - name: whitelist VPC Subnet Address
        #aws s3 sync ./build s3://test-bucket
        run: |
          aws ec2 create-network-acl-entry --network-acl-id acl-00c482d30cef5efcf --ingress --rule-number 99 --cidr-block 172.31.0.0/16 --rule-action allow --protocol -1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      
